# SERVICES: Each service is a separate container
services:

  # SERVICE 1: Backend (Python/Flask)
  backend:
    # BUILD: Instructions for building this service
    build:
      context: ./Backend          # Where to find Dockerfile and code
      dockerfile: Dockerfile      # Which Dockerfile to use
    
    # CONTAINER_NAME: Friendly name for the container
    container_name: dsp-backend
    
    # PORTS: Map container port to host port
    # "5000:5000" means: host port 5000 â†’ container port 5000
    # Access backend at: http://localhost:5000
    ports:
      - "5000:5000"
    
    # VOLUMES: Share files between host and container
    # Changes on host are immediately visible in container (hot reload)
    volumes:
      - ./Backend:/app                      # Sync code for development
      - ./datasets:/app/datasets            # Share datasets
      - backend_models:/app/static/models   # Persist ML models
    
    # ENVIRONMENT: Set environment variables inside container
    environment:
      - FLASK_ENV=development      # Enables debug mode, auto-reload
      - PYTHONUNBUFFERED=1         # See print() statements immediately
    
    # RESTART: What to do if container crashes
    restart: unless-stopped        # Always restart unless manually stopped
    
    # HEALTHCHECK: Override Dockerfile's healthcheck (optional)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s       # Check every 30 seconds
      timeout: 10s        # Give up after 10 seconds
      retries: 3          # Retry 3 times before marking unhealthy
      start_period: 40s   # Wait 40s before starting checks (app startup time)
    
    # NETWORKS: Which network to join
    networks:
      - dsp-network

  # SERVICE 2: Frontend (nginx)
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    
    container_name: dsp-frontend
    
    # PORTS: Map port 3000 on host to port 80 in container
    # Access frontend at: http://localhost:3000
    ports:
      - "3000:80"
    
    # VOLUMES: Mount frontend files for live editing
    volumes:
      - ./Frontend:/usr/share/nginx/html:ro  # Mount as read-only
      - ./Frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    
    # DEPENDS_ON: Wait for backend to be healthy before starting
    depends_on:
      backend:
        condition: service_healthy    # Wait for healthcheck to pass
    
    restart: unless-stopped
    
    networks:
      - dsp-network

# VOLUMES: Named volumes that persist data
# These survive even if containers are deleted
volumes:
  backend_models:    # Stores trained ML models

# NETWORKS: Virtual networks for container communication
# Containers on same network can talk to each other by name
networks:
  dsp-network:
    driver: bridge   # Standard Docker networking